#!/usr/bin/env lua
-- -*- lua -*-

--
-- This file is part of uMF.
--
-- (C) 2012 Markus Klotzbuecher, markus.klotzbuecher@mech.kuleuven.be,
-- Department of Mechanical Engineering, Katholieke Universiteit
-- Leuven, Belgium.
--
-- You may redistribute this software and/or modify it under either
-- the terms of the GNU Lesser General Public License version 2.1
-- (LGPLv2.1 <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>)
-- or (at your discretion) of the Modified BSD License: Redistribution
-- and use in source and binary forms, with or without modification,
-- are permitted provided that the following conditions are met:
--    1. Redistributions of source code must retain the above copyright
--       notice, this list of conditions and the following disclaimer.
--    2. Redistributions in binary form must reproduce the above
--       copyright notice, this list of conditions and the following
--       disclaimer in the documentation and/or other materials provided
--       with the distribution.
--    3. The name of the author may not be used to endorse or promote
--       products derived from this software without specific prior
--       written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
-- OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
-- ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
-- DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
-- GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-- INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-- WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
-- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--

local umf=require("umf")
local utils=require("utils")

NumberSpec=umf.NumberSpec
StringSpec=umf.StringSpec
BoolSpec=umf.BoolSpec
FunctionSpec=umf.FunctionSpec
EnumSpec=umf.EnumSpec
TableSpec=umf.TableSpec
ClassSpec=umf.ClassSpec
ObjectSpec=umf.ObjectSpec

function help()
   print( [=[
umfcheck v0.1
validate uMF models.
  Usage:
     umfcheck OPTIONS <modelfile> <specfile>
  Options:
	-q    quiet, no output
	-h    print help
	     ]=] )
end

function check_file(f, name)
   if not utils.file_exists(f) then
      print("error: no "..name.." "..specfile)
      os.exit(1)
   end
   return f
end

local argtab=utils.proc_args(arg)

if #arg<2 or argtab['-h'] then help(); os.exit(1); end

local specfile = check_file(arg[#arg])
local modelfile = check_file(arg[#arg-1])

local spec = dofile(specfile)
local model = dofile(modelfile)

if not spec then print("err: no spec could be loaded from file "..specfile) end
if not model then print("err: no model could be loaded from file "..modelfile) end

if umf.check(model, spec, (not argtab['-q']))==0 then os.exit(0)
else os.exit(2) end
